# AIエージェントのコンテキストエンジニアリング：Manusから学ぶ実践的知見

AIエージェント「Manus」の開発者が書いた記事を読んで、勉強になったので共有します。コンテキストエンジニアリングという分野について、実際の開発経験から得た知見がまとめられています。

## Manusって何？

Manusは仮想マシン環境でツールを使って複雑なタスクを自動化するAIエージェントのようです。開発者のYichao 'Peak' Ji氏が、開発過程で学んだことを詳しく書いてくれています。

## なぜコンテキストエンジニアリングを選んだのか

記事によると、Manusチームは開発初期にモデルの訓練とインコンテキスト学習のどちらを選ぶか迷ったそうです。結果的にインコンテキスト学習を選択したのは、モデル訓練だと改善に週単位の時間がかかってしまうからとのこと。インコンテキスト学習なら時間単位で改善できるので、開発スピードが全然違うんですね。

## 実践から学んだ6つのポイント

記事では「Stochastic Graduate Descent」（確率的勾配降下法をもじった造語？）と呼ぶ試行錯誤を通じて、6つの重要なポイントを見つけたそうです。

### 1. KVキャッシュの最適化が重要らしい
本番環境では、KVキャッシュのヒット率が最も重要な指標だと書かれています。エージェントは入力対出力の比率が100:1くらいになるそうで、キャッシュが効くかどうかでコストが大きく変わるとのこと。Claude Sonnetの例では、キャッシュが効くと10分の1のコストになるそうです。

プロンプトの接頭辞を安定させたり、コンテキストを追加専用にしたりする工夫が必要だそうです。

### 2. ツールの動的な追加・削除は避けた方がいい
ツールが増えると選択が難しくなりますが、動的に追加・削除するとキャッシュが無効化されてしまうそうです。Manusでは状態機械とロジットマスクという手法で、ツール定義は残しつつ選択できるアクションを制限しているとのこと。この辺りは技術的で難しそうですが、面白いアプローチですね。

### 3. ファイルシステムを外部メモリとして使う
128Kトークンの大きなコンテキストウィンドウでも、実際には足りないことが多いそうです。そこでManusはファイルシステムを「無制限で永続的な外部メモリ」として活用しているとのこと。モデルが必要に応じてファイルを読み書きできるようにしているそうです。

### 4. todo.mdで目標を忘れないようにする
長期タスクでは目標から逸脱しがちになるそうです。Manusは意図的にtodo.mdファイルを作って更新し、目標をコンテキストの末尾に「暗唱」することで、モデルの注意を目標に向け続けているそうです。なるほど、そういう工夫があるんですね。

### 5. 失敗もコンテキストに残しておく
エラーや失敗を隠したくなりますが、それだとモデルが学習できないそうです。失敗したアクションとその結果をコンテキストに残すことで、同じ過ちを繰り返しにくくなるとのこと。エラー回復力が真のエージェント能力の指標だと書かれています。

### 6. パターン化しすぎると良くない
類似のアクション-観察ペアが続くと、モデルが最適でないパターンを繰り返してしまうそうです。Manusではアクションと観察にバリエーションを持たせて、パターン化による硬直を防いでいるとのこと。

## 感想

記事を読んで、AIエージェント開発には想像以上に細かい工夫が必要なんだなと思いました。特にKVキャッシュの話は、コスト面でも性能面でも重要そうです。数百万ユーザーでの実世界テストを通じて得られた知見ということなので、かなり実践的な内容だと思います。

AIエージェント開発に興味がある方は、ぜひ[元記事](https://manus.im/blog/Context-Engineering-for-AI-Agents-Lessons-from-Building-Manus)を読んでみてください。私もまだ理解しきれていない部分が多いですが、勉強になりました。
